@page "/permissions/userRoles/{Id}"
@using Microsoft.AspNetCore.Identity
@using Amusoft.PCR.Model.Entities
@using Amusoft.PCR.Server.Areas.Identity.Pages.Account.Manage
@using System.Diagnostics
@using Amusoft.PCR.Blazor
@using Amusoft.PCR.Blazor.Extensions
@using Amusoft.PCR.Model.Statics
@using Microsoft.Extensions.Logging
@attribute [Authorize(Roles = RoleNames.Permissions)]
@inject UserManager<ApplicationUser> _userManager
@inject RoleManager<IdentityRole> _roleManager

<Title Headline="Permission overview" WindowTitle="Permission overview"></Title>

@if (_currentRoles == null)
{
	<ProgressBar Visible="true"></ProgressBar>
}
else
{
	foreach (var role in _currentRoles)
	{
		if (string.Equals(role.Name, "administrator", StringComparison.OrdinalIgnoreCase))
		{
			<LabeledCheckbox @bind-Checked="@role.Checked" IsReadonly="true" >@role.Name</LabeledCheckbox>
		}
		else
		{
			<LabeledCheckbox @bind-Checked="@role.Checked" IsReadonly="false" >@role.Name</LabeledCheckbox>
		}
	}

	<div class="container mt-3">
		
		<div class="row mb-3 mb-xl-2 ">
			<Button CssClass="d-inline-block col-xl-4"
			        ButtonTheme="@ButtonThemeKind.Primary"
			        OnClick="Save">
				Save
			</Button>
		</div>
	</div>
}

@code {

	[DebuggerDisplay("{Name} => {Checked}")]
	private class ClickModel
	{
		public string Name { get; set; }

		public bool Checked { get; set; }
	}

	[Inject]
	public ILogger<UserRoles> Logger { get; set; }

	[Inject]
	public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

	[Inject]
	public IJSRuntime JsRuntime { get; set; }

	[Parameter]
	public string Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var user = await GetUserByCurrentIdAsync();

		_allRoles = _roleManager.Roles.ToList();
		_userRoles = await _userManager.GetRolesAsync(user);

		_currentRoles = GenerateModel(_allRoles, _userRoles).ToList();

		await base.OnInitializedAsync();
	}

	private async Task<ApplicationUser> GetUserByCurrentIdAsync()
	{
		return await _userManager.FindByIdAsync(Id);
	}

	private IEnumerable<ClickModel> GenerateModel(IList<IdentityRole> allRoles, IList<string> userRoles)
	{
		var allUserRoles = userRoles.ToHashSet();
		foreach (var role in allRoles)
		{
			yield return new ClickModel()
			{
				Checked = allUserRoles.Contains(role.Name),
				Name = role.Name
			};
		}
	}

	private IList<string> _userRoles;
	private IList<IdentityRole> _allRoles;
	private IList<ClickModel> _currentRoles;

	private async Task Save()
	{
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var signedInUserName = state.User?.Identity?.Name ?? "Unknown";
		var actor = await _userManager.GetUserAsync(state.User);
		if (!await _userManager.IsInRoleAsync(actor, RoleNames.Administrator))
		{
			Logger.LogWarning("User {Name} without admin privileges attempted to change permissions", signedInUserName);
			return;
		}

		var targetUser = await GetUserByCurrentIdAsync();
		var allGranted = _currentRoles
			.Where(d => d.Checked)
			.Select(d => d.Name)
			.ToArray();

		var removalRoles = _allRoles.Select(d => d.Name).ToArray();
		var allGrantedHash = new HashSet<string>(allGranted, StringComparer.OrdinalIgnoreCase);


		foreach (var role in removalRoles)
		{
			var inRole = await _userManager.IsInRoleAsync(targetUser, role);
			var wantsGrant = allGrantedHash.Contains(role);
			if (inRole)
			{
				if (!wantsGrant)
				{
					Logger.LogInformation("User {User} removing permission {Role} to {TargetUser}", signedInUserName, role, targetUser.UserName);
					await _userManager.RemoveFromRoleAsync(targetUser, role);
				}
			}
			else
			{
				if (wantsGrant)
				{
					Logger.LogInformation("User {User} adding permission {Role} to {TargetUser}", signedInUserName, role, targetUser.UserName);
					await _userManager.AddToRoleAsync(targetUser, role);
				}
			}
		}

		await JsRuntime.History().Back();
	}
}
