@using Amusoft.PCR.Server.Dependencies
@using Amusoft.PCR.Grpc.Common
@inject IInteropService _interopService

@if (_processList == null)
{
	<div class="alert alert-info"> Loading process list ...</div>
}
else
{
	<div class="p-3">
		<Button OnClick="() => CloseRequested.InvokeAsync(null)">Exit</Button>
		<Button OnClick="() => ReloadAsync()">Reload</Button>
		<label>
			Process name filter:
			<TextBox @bind-Value="_processNameFilter"></TextBox>
		</label>
	</div>

	<table cellpadding="5" cellspacing="5">
		<tr>
			<td></td>
			<td></td>
			<td>Window title</td>
			<td>Id</td>
			<td>Process name</td>
		</tr>
		@foreach (var item in _processList.OrderByDescending(d => d.MainWindowTitle))
		{
			<tr>
				<td><Button OnClick="() => ExecuteKillProcess(item)">Kill process</Button></td>
				@if (string.IsNullOrEmpty(item.MainWindowTitle))
				{
					<td></td>
				}
				else
				{
					<td><Button OnClick="() => FocusWindowProcess(item)">Focus process</Button></td>
				}
				<td>@item.MainWindowTitle</td>
				<td>@item.ProcessId</td>
				<td>@item.ProcessName</td>
			</tr>
		}
	</table>
}

@code {

	protected override async Task OnInitializedAsync()
	{
		await ReloadAsync();
		await base.OnInitializedAsync();
	}

	private async Task ReloadAsync()
	{
		_processList = null;
		var items = await _interopService.GetProcessList();
		if (!string.IsNullOrEmpty(_processNameFilter))
		{
			items = items.Where(d => d.ProcessName.Contains(_processNameFilter, StringComparison.OrdinalIgnoreCase)).ToList();
		}
		_processList = items;
	}

	[Parameter]
	public EventCallback CloseRequested { get; set; }

	private IList<ProcessListResponseItem> _processList;

	private string _processNameFilter;

	private async Task ExecuteKillProcess(ProcessListResponseItem item)
	{
		await _interopService.KillProcessById(item.ProcessId);
		await ReloadAsync();
		await CloseRequested.InvokeAsync(null);
	}

	private async Task FocusWindowProcess(ProcessListResponseItem item)
	{
		await _interopService.FocusProcessWindow(item.ProcessId);
	}

}
