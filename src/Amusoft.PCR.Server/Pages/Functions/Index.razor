@page "/functions"
@using Amusoft.PCR.Server.Dependencies
@using System.Diagnostics
@inject IDialogService DialogService
@inject IInteropService InteropService

<Title Headline="Functions" WindowTitle="Functions"></Title>

<div>
	<h1>Audio</h1>
	<Button OnClick="(() => InteropService.ToggleMute())">Toggle mute</Button>
	<h5 class="mt-3">Master volume: @desiredMasterVolume</h5>
	<div>
		<LabeledRange MinValue="0" MaxValue="100" Step="1" Value="desiredMasterVolume" ValueChanged="OnMasterVolumeChanged"></LabeledRange>
	</div>
</div>

<div class="mt-3">
	<h1>Windows</h1>

	<h4 class="mt-3">Process control</h4>
	<Button OnClick="(() => processListOpen = true)">Running processes</Button>
	<Button OnClick="@(() => InteropService.ExecuteCommandAsCurrentUser("spotify"))">Launch spotify</Button>

	<h4 class="mt-3">Screen control</h4>
	<Button OnClick="(() => InteropService.LockWorkStation())">Lock Screen</Button>
	<Button OnClick="(() => InteropService.MonitorOff())">Monitor Off</Button>
	<Button OnClick="(() => InteropService.MonitorOn())">Monitor On</Button>

	<h4 class="mt-3">Shutdown control</h4>
	<LabeledCheckbox CssClass="mt-2 mb-2" LabelStyle="color: red;" @bind-Checked="closeApplications">Close applications</LabeledCheckbox>
	<h6>Immediate controls</h6>
	<Button OnClick="(() => InteropService.AbortShutdown())">Abort Shutdown</Button>
	<Button OnClick="(() => InteropService.Shutdown(TimeSpan.FromMinutes(1), closeApplications))">Shutdown</Button>
	<Button OnClick="(() => InteropService.Restart(TimeSpan.FromMinutes(1), closeApplications))">Restart</Button>
	<Button OnClick="(() => InteropService.Hibernate())">Hibernate</Button>
	<h6 class="mt-2">Delayed controls</h6>
	
	<LabeledTime @bind-Value="shutdownDelay"></LabeledTime>
	<Button OnClick="(() => InteropService.Shutdown(shutdownDelay, closeApplications))">Shutdown with @shutdownDelay delay</Button>
	<Button OnClick="(() => InteropService.Restart(shutdownDelay, closeApplications))">Restart with @shutdownDelay delay</Button>

	<h4 class="mt-3">Active window key press</h4>
	<div>
		<h6>Media keys</h6>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys("{m}"))">M</Button>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys("{f}"))">F</Button>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys(" "))">Space</Button>
	</div>
	<div class="mt-2">
		<h6>Arrow keys</h6>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys("{LEFT}"))">←</Button>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys("{RIGHT}"))">→</Button>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys("{UP}"))">↑</Button>
		<Button CssClass="mr-3" OnClick="@(() => InteropService.SendKeys("{DOWN}"))">↓</Button>
	</div>
</div>

<ModalDialog Visible="processListOpen">
	<ProcessList CloseRequested="(() => processListOpen = false)"></ProcessList>
</ModalDialog>

@code {
	private bool closeApplications = false;
	private int desiredMasterVolume;

	private bool processListOpen;

	private TimeSpan shutdownDelay = TimeSpan.FromHours(2);

	protected override async Task OnInitializedAsync()
	{
		desiredMasterVolume = await InteropService.GetMasterVolume();
		await base.OnInitializedAsync();
	}

	private async Task OnMasterVolumeChanged(int value)
	{
		desiredMasterVolume = value;
		await InteropService.SetMasterVolume(desiredMasterVolume);
	}
}
