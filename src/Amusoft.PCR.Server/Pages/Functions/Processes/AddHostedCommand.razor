@page "/functions/processMenu/addHostedCommand/{id?}"
@attribute [Authorize(Roles = RoleNames.FunctionAddNewProgram)]
@using Amusoft.PCR.Blazor.Extensions
@using System.ComponentModel.DataAnnotations
@using Amusoft.PCR.Blazor
@using Amusoft.PCR.Grpc.Common
@using Amusoft.PCR.Model.Entities
@using Amusoft.PCR.Model.Statics
@using Amusoft.PCR.Server.Domain.Authorization
@using Amusoft.PCR.Server.Domain.IPC
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

<Title WindowTitle="New Host command" Headline="New Host command"></Title>

<EditForm Model="EditInstance" OnValidSubmit="SaveClick">
	<div class="container">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="row mb-3 mb-xl-2">
			<TextBox WrapperClasses="col-8" Placeholder="Command name" @bind-Value="EditInstance.CommandName"></TextBox>
		</div>
		<div class="row mb-3 mb-xl-2">
			<TextBox WrapperClasses="col-8" Placeholder="Program path" @bind-Value="EditInstance.ProgramPath"></TextBox>
		</div>
		<div class="row mb-3 mb-xl-2">
			<TextBox WrapperClasses="col-8" Placeholder="Arguments" @bind-Value="EditInstance.Arguments"></TextBox>
		</div>
		<div class="row mb-3 mb-xl-2">
			<Button ButtonTheme="@ButtonThemeKind.Success" ButtonForm="@ButtonFormKind.Submit">Create</Button>
		</div>
		
		@foreach (var permission in EditInstance.Permissions)
		{
			<LabeledCheckbox CssClass="row mb-3 mb-xl-2" @bind-Checked="@permission.Checked">@permission.Title</LabeledCheckbox>
		}
	</div>
</EditForm>
@code {

	private class EditModel
	{
		[Required]
		[MinLength(3)]
		public string CommandName { get; set; }

		[Required]
		[MinLength(2)]
		public string ProgramPath { get; set; }

		public string Arguments { get; set; }

		public List<CheckState> Permissions { get; set; } = new List<CheckState>();
	}

	private EditModel EditInstance { get; set; } = new EditModel();

	[Parameter]
	public string Id { get; set; }

	[Inject]
	public IPermissionService PermissionService { get; set; }

	[Inject]
	public IJSRuntime JsRuntime { get; set; }

	[Inject]
	public UserManager<ApplicationUser> UserManager { get; set; }

	[Inject]
	public IHostCommandService HostedCommandService { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (Id != null)
		{
			await LoadAsync();
		}
		else
		{
			await LoadPermissionsAsync();
		}

		await base.OnInitializedAsync();
	}

	private async Task LoadAsync()
	{
		var command = await HostedCommandService.GetByIdAsync(Id);
		EditInstance.CommandName = command.CommandName;
		EditInstance.Arguments = command.Arguments;
		EditInstance.ProgramPath = command.ProgramPath;

		await LoadPermissionsAsync();
	}

	private async Task LoadPermissionsAsync()
	{
		var permissions = await PermissionService.GetByKindAsync(PermissionKind.HostCommand);
		var allUsers = await UserManager.Users.ToListAsync();

		PopulatePermissions(EditInstance.Permissions, permissions, allUsers);
	}

	private void PopulatePermissions(List<CheckState> grantedPermissions, List<Permission> permissions, List<ApplicationUser> allUsers)
	{
		grantedPermissions.Clear();

		foreach (var user in allUsers)
		{
			var hasPermission = permissions.Any(d => d.PermissionType == PermissionKind.HostCommand && d.UserId == user.Id && d.SubjectId == Id);
			grantedPermissions.Add(new CheckState(user.UserName, hasPermission, user.Id));
		}
	}

	private async Task SaveClick()
	{

		if (Id == null)
		{
			var hostCommand = new HostCommand();
			hostCommand.CommandName = EditInstance.CommandName;
			hostCommand.Arguments = EditInstance.Arguments;
			hostCommand.ProgramPath = EditInstance.ProgramPath;

			if (await HostedCommandService.CreateAsync(hostCommand))
			{
				await PermissionService.RevokeBySubjectAndKindAsync(PermissionKind.HostCommand, hostCommand.Id);
				await PermissionService.AddPermissions(GetPermissionList(EditInstance.Permissions, hostCommand.Id));
				await JsRuntime.History().Back();
			}
			else
			{
				await JsRuntime.UI().Alert("Failed to create host command");
			}
		}
		else
		{
			var hostCommand = await HostedCommandService.GetByIdAsync(Id);
			hostCommand.CommandName = EditInstance.CommandName;
			hostCommand.Arguments = EditInstance.Arguments;
			hostCommand.ProgramPath = EditInstance.ProgramPath;

			if (await HostedCommandService.UpdateAsync(hostCommand))
			{
				await PermissionService.RevokeBySubjectAndKindAsync(PermissionKind.HostCommand, hostCommand.Id);
				await PermissionService.AddPermissions(GetPermissionList(EditInstance.Permissions, Id));
				await JsRuntime.History().Back();
			}
			else
			{
				await JsRuntime.UI().Alert("Failed to create host command");
			}
		}
	}

	private List<Permission> GetPermissionList(List<CheckState> permissions, string hostCommandId)
	{
		return permissions
			.Where(d => d.Checked)
			.Select(d => new Permission()
		{
			PermissionType = PermissionKind.HostCommand,
			SubjectId = hostCommandId,
			UserId = d.Id
		}).ToList();
	}

}
