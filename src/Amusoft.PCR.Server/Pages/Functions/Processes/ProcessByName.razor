@page "/functions/processMenu/processByName/{ProcessName}"
@using Amusoft.PCR.Server.Dependencies
@using Amusoft.PCR.Grpc.Common
@using Amusoft.PCR.Blazor.Extensions

<Title Headline="@("Processes named: " + ProcessName)" WindowTitle="@("Processes named: " + ProcessName)"></Title>

@if (_processList == null)
{
	<div class="alert alert-info"> Loading process list ...</div>
}
else
{
	<div class="container">
		<div class="row">
			<div class="col-1"></div>
			<div class="col-2">Process id</div>
			<div class="col-9">Window title</div>
		</div>
		@foreach (var item in _processList)
		{
			<div class="row">
				<div class="col-1">
					<Button OnClick="@(() => KillProcess(item))">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-octagon-fill" viewBox="0 0 16 16">
							<path d="M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zm-6.106 4.5L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708z"/>
						</svg>
					</Button>
				</div>
				<div class="col-2"><div class="d-inline-block" style="margin: 0 auto;">@item.ProcessId</div></div>
				<div class="col-9"><div class="d-inline-block" style="margin: 0 auto;">@item.MainWindowTitle</div></div>
			</div>
		}
	</div>
}

@code {

	[Inject]
	public IUserContextChannel UserContextChannel { get; set; }

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	[Inject]
	public IJSRuntime JsRuntime { get; set; }

	[Parameter]
	public string ProcessName { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await ReloadAsync();
		await base.OnInitializedAsync();
	}

	private async Task ReloadAsync()
	{
		var processList = await UserContextChannel.GetProcessList();
		_processList = processList.Where(d => string.Equals(d.ProcessName, ProcessName)).ToList();
	}

	private IList<ProcessListResponseItem> _processList;

	private async Task KillProcess(ProcessListResponseItem item)
	{
		await UserContextChannel.KillProcessById(item.ProcessId);
		await ReloadAsync();

		if (_processList.Count == 0)
		{
			await JsRuntime.History().Back();
		}
		else
		{
			StateHasChanged();
		}
	}
}
