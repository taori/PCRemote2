syntax = "proto3";

option csharp_namespace = "Amusoft.PCR.Grpc.Common";
package Amusoft.PCR.Grpc.Common;

service DesktopIntegrationService {
	rpc Authenticate (.Amusoft.PCR.Grpc.Common.AuthenticateRequest) returns (.Amusoft.PCR.Grpc.Common.AuthenticateResponse) {}
	rpc SuicideOnProcessExit (.Amusoft.PCR.Grpc.Common.SuicideOnProcessExitRequest) returns (.Amusoft.PCR.Grpc.Common.SuicideOnProcessExitResponse) {}
	rpc ToggleMute (ToggleMuteRequest) returns (ToggleMuteReply) {}
	rpc MonitorOn (MonitorOnRequest) returns (MonitorOnReply) {}
	rpc MonitorOff (MonitorOffRequest) returns (MonitorOffReply) {}
	rpc AbortShutDown (.Amusoft.PCR.Grpc.Common.AbortShutdownRequest) returns (.Amusoft.PCR.Grpc.Common.AbortShutdownReply) {}
	rpc ShutDownDelayed (.Amusoft.PCR.Grpc.Common.ShutdownDelayedRequest) returns (.Amusoft.PCR.Grpc.Common.ShutdownDelayedReply) {}
	rpc Restart (.Amusoft.PCR.Grpc.Common.RestartRequest) returns (.Amusoft.PCR.Grpc.Common.RestartReply) {}
	rpc Hibernate (.Amusoft.PCR.Grpc.Common.HibernateRequest) returns (.Amusoft.PCR.Grpc.Common.HibernateReply) {}
	rpc SetMasterVolume (.Amusoft.PCR.Grpc.Common.SetMasterVolumeRequest) returns (.Amusoft.PCR.Grpc.Common.SetMasterVolumeReply) {}
	rpc GetMasterVolume (.Amusoft.PCR.Grpc.Common.GetMasterVolumeRequest) returns (.Amusoft.PCR.Grpc.Common.GetMasterVolumeReply) {}
	rpc SendKeys (.Amusoft.PCR.Grpc.Common.SendKeysRequest) returns (.Amusoft.PCR.Grpc.Common.SendKeysReply) {}
	rpc SendMediaKeys (.Amusoft.PCR.Grpc.Common.SendMediaKeysRequest) returns (.Amusoft.PCR.Grpc.Common.SendMediaKeysReply) {}
	rpc LockWorkStation (.Amusoft.PCR.Grpc.Common.LockWorkStationRequest) returns (.Amusoft.PCR.Grpc.Common.LockWorkStationReply) {}
	rpc GetProcessList (.Amusoft.PCR.Grpc.Common.ProcessListRequest) returns (.Amusoft.PCR.Grpc.Common.ProcessListResponse) {}
	rpc KillProcessById (.Amusoft.PCR.Grpc.Common.KillProcessRequest) returns (.Amusoft.PCR.Grpc.Common.KillProcessResponse) {}
	rpc FocusWindow (.Amusoft.PCR.Grpc.Common.FocusWindowRequest) returns (.Amusoft.PCR.Grpc.Common.FocusWindowResponse) {}
	rpc LaunchProgram (.Amusoft.PCR.Grpc.Common.LaunchProgramRequest) returns (.Amusoft.PCR.Grpc.Common.LaunchProgramResponse) {}
}

message AuthenticateRequest {}
message AuthenticateResponse {
	bool success = 1;
}

message SuicideOnProcessExitRequest {
	int32 processId = 1;
}
message SuicideOnProcessExitResponse{
	bool success = 1;
}

message ToggleMuteRequest {}
message ToggleMuteReply {
	bool muted = 1;
}

message MonitorOnRequest {}
message MonitorOnReply {
	bool success = 1;
}

message MonitorOffRequest {}
message MonitorOffReply {
	bool success = 1;
}

message LockWorkStationRequest {}
message LockWorkStationReply {
	bool success = 1;
}

message SendKeysRequest {
	string message = 1;
}
message SendKeysReply {
	bool success = 1;
}

message SendMediaKeysRequest {
	enum MediaKeyCode {
		NextTrack = 0;
		PreviousTrack = 1;
		PlayPause = 2;
	};
	MediaKeyCode keyCode = 1;
}
message SendMediaKeysReply {
	bool success = 1;
}

message SetMasterVolumeRequest {
	int32 value = 1;	
}
message SetMasterVolumeReply {
	int32 value = 1;
}

message GetMasterVolumeRequest {
}
message GetMasterVolumeReply {
	int32 value = 1;
}

message ShutdownDelayedRequest {
	int32 seconds = 1;
	bool force = 2;
}
message ShutdownDelayedReply {
	bool success = 1;
}

message AbortShutdownRequest {}
message AbortShutdownReply {
	bool success = 1;
}

message HibernateRequest {}
message HibernateReply {
	bool success = 1;
}

message RestartRequest {
	int32 delay = 1;
	bool force = 2;
}
message RestartReply {
	bool success = 1;
}

message ProcessListRequest {}
message ProcessListResponse {
	repeated .Amusoft.PCR.Grpc.Common.ProcessListResponseItem results = 1;
}
message ProcessListResponseItem {
	int32 processId = 1;
	string processName = 2;
	string mainWindowTitle = 3;
	float cpuUsage = 4;
}

message KillProcessRequest {
	int32 processId = 1;
}
message KillProcessResponse {
	bool success = 1;
}

message FocusWindowRequest {
	int32 processId = 1;
}
message FocusWindowResponse {
	bool success = 1;
}

message LaunchProgramRequest {
	string programName = 1;
	string arguments = 2;
}
message LaunchProgramResponse {
	bool success = 1;
}
