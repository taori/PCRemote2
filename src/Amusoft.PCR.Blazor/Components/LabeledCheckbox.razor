<div class="form-check @CssClass" >
	<input id="@LabelId" class="form-check-input" type="checkbox"
	       @bind="CheckedInternal"
	       @attributes="GetCheckboxAttributes()"/>
	<label class="form-check-label @LabelCssClass" style="@LabelStyle" for="@LabelId">
		@ChildContent
	</label>
</div>

@code {

	private long LabelId = DateTime.Now.Ticks;

	private Dictionary<string, object> GetCheckboxAttributes()
	{
		var values = new Dictionary<string, object>();
		if (Checked)
			values.Add("checked", "checked");

		return values;
	}

	[Parameter]
	public string CssClass { get; set; }

	[Parameter]
	public string LabelCssClass { get; set; }

	[Parameter]
	public string LabelStyle { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public bool Checked
	{
		get => CheckedInternal;
		set => CheckedInternal = value;
	}

	[Parameter]
	public EventCallback<bool> CheckedChanged { get; set; }

	private bool _checkedInternal;

	private bool CheckedInternal
	{
		get { return _checkedInternal; }
		set
		{
			if (EqualityComparer<bool>.Default.Equals(_checkedInternal, value))
				return;
			_checkedInternal = value;
			CheckedChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public bool Enabled
	{
		get => EnabledInternal;
		set => EnabledInternal = value;
	}

	[Parameter]
	public EventCallback<bool> EnabledChanged { get; set; }

	private bool _enabledInternal;

	private bool EnabledInternal
	{
		get { return _enabledInternal; }
		set
		{
			if (EqualityComparer<bool>.Default.Equals(_enabledInternal, value))
				return;
			_enabledInternal = value;
			EnabledChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<MouseEventArgs> OnClick { get; set; }

}