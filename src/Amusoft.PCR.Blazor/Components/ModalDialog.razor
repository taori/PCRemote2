@using Microsoft.JSInterop
@implements IDisposable

<div @ref="wrapper" class="amu-modal-wrapper" @onclick="WrapperClicked" style="padding: @(Padding)px; display: @(VisibleInternal ? "block" : "none")">
	<div class="amu-modal-content" @onclick:stopPropagation="true">
		<h3>@Headline</h3>
		@ChildContent
	</div>
</div>

@code {

	private ElementReference wrapper;
	private DotNetObjectReference<ModalDialog> _self;

	[Parameter]
	public string Headline
	{
		get => HeadlineInternal;
		set => HeadlineInternal = value;
	}

	[Parameter]
	public EventCallback<string> HeadlineChanged { get; set; }

	private string _headlineInternal;

	private string HeadlineInternal
	{
		get { return _headlineInternal; }
		set
		{
			if (EqualityComparer<string>.Default.Equals(_headlineInternal, value))
				return;
			_headlineInternal = value;
			HeadlineChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Inject]
	public IJSRuntime JsRuntime { get; set; }

	[Parameter]
	public int Padding { get; set; } = 100;


	[Parameter]
	public bool Visible
	{
		get => VisibleInternal;
		set => VisibleInternal = value;
	}

	[Parameter]
	public EventCallback<bool> VisibleChanged { get; set; }

	private bool _visibleInternal;

	private bool VisibleInternal
	{
		get { return _visibleInternal; }
		set
		{

			if (EqualityComparer<bool>.Default.Equals(_visibleInternal, value))
				return;
			_visibleInternal = value;
			VisibleChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public bool CloseOnModalFrameClick
	{
		get => CloseOnModalFrameClickInternal;
		set => CloseOnModalFrameClickInternal = value;
	}

	private bool CloseOnModalFrameClickInternal { get; set; } = true;

	public void Hide()
	{
		VisibleInternal = false;
		StateHasChanged();
	}

	public void Show()
	{
		VisibleInternal = true;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		_self = DotNetObjectReference.Create(this);
		base.OnInitialized();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		if (firstRender)
			JsRuntime.InvokeVoidAsync("Amusoft.Components.ModalDialog.initialize", wrapper);
	}

	public void Dispose()
	{
		_self?.Dispose();
	}

	private void WrapperClicked()
	{
		Visible = false;
	}
}