<div class="form-group" title="@ValueInternal">
	<label for="@LabelId" class="form-label" title="@Title">@ChildContent</label>
	<input type="range" class="form-range" id="@LabelId" min="@MinValueInternal" max="@MaxValueInternal" @bind="@ValueInternal" step="@StepInternal">
</div>

@code {

	private long LabelId = DateTime.Now.Ticks;

	private Dictionary<string, object> GetCheckboxAttributes()
	{
		var values = new Dictionary<string, object>();

		return values;
	}

	[Parameter]
	public string Title { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public bool Enabled
	{
		get => EnabledInternal;
		set => EnabledInternal = value;
	}

	[Parameter]
	public EventCallback<bool> EnabledChanged { get; set; }

	private bool _enabledInternal;

	private bool EnabledInternal
	{
		get { return _enabledInternal; }
		set
		{
			if (EqualityComparer<bool>.Default.Equals(_enabledInternal, value))
				return;
			_enabledInternal = value;
			EnabledChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public float Step
	{
		get => StepInternal;
		set => StepInternal = value;
	}

	[Parameter]
	public EventCallback<float> StepChanged { get; set; }

	private float _stepInternal;

	private float StepInternal
	{
		get { return _stepInternal; }
		set
		{
			if (EqualityComparer<float>.Default.Equals(_stepInternal, value))
				return;
			_stepInternal = value;
			StepChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public int Value
	{
		get => ValueInternal;
		set => ValueInternal = value;
	}

	[Parameter]
	public EventCallback<int> ValueChanged { get; set; }

	private int _valueInternal;

	private int ValueInternal
	{
		get { return _valueInternal; }
		set
		{
			if (EqualityComparer<int>.Default.Equals(_valueInternal, value))
				return;
			_valueInternal = value;
			ValueChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public int MaxValue
	{
		get => MaxValueInternal;
		set => MaxValueInternal = value;
	}

	[Parameter]
	public EventCallback<int> MaxValueChanged { get; set; }

	private int _maxValueInternal;

	private int MaxValueInternal
	{
		get { return _maxValueInternal; }
		set
		{
			if (EqualityComparer<int>.Default.Equals(_maxValueInternal, value))
				return;
			_maxValueInternal = value;
			MaxValueChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public int MinValue
	{
		get => MinValueInternal;
		set => MinValueInternal = value;
	}

	[Parameter]
	public EventCallback<int> MinValueChanged { get; set; }

	private int _minValueInternal;

	private int MinValueInternal
	{
		get { return _minValueInternal; }
		set
		{
			if (EqualityComparer<int>.Default.Equals(_minValueInternal, value))
				return;
			_minValueInternal = value;
			MinValueChanged.InvokeAsync(value);
		}
	}

	private void OnValueChanged()
	{
		ValueChanged.InvokeAsync(_valueInternal);
	}
}