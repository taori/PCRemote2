name: CI

on:

  push:
    branches:
      - master 
    paths: 
      - src/*
      
  pull_request:    
    types: 
      - opened
      - reopened
      - synchronize   
      
  # manual trigger
  workflow_dispatch:
    inputs:
    
      buildConfiguration:
        required: true
        description: "Configuration for build processes"
        default: 'Release'
        
      productVersion:
        required: true
        description: "Version for Release numbers"
        default: '1.0.0'
        
      createRelease:
        required: true
        description: "Provide GitHub release?: true/false"
        default: "false"
  
env:
  WS: ${{ github.workspace }}
  BUILDCONFIGURATION : ${{ github.event.inputs.buildConfiguration }}


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
          
  Android:
    runs-on: windows-latest
    steps:
            
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: 16.9
          
      - shell : bash
        name: Load android keystore
        run: |
          echo -n "$ANDROID_KEYSTORE" > "$WS\android.keystore.encoded"
          base64 --decode "$WS\android.keystore.encoded" > "$WS\android.keystore"            
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          
      - shell: pwsh
        name: Build APK
        run: |
          msbuild src/Amusoft.PCR.Mobile.Droid/Amusoft.PCR.Mobile.Droid.csproj /verbosity:minimal /restore /t:"SignAndroidPackage" /bl /p:Configuration=$env:BUILDCONFIGURATION /p:OutputPath="$env:WS\artifacts\android" /p:AndroidKeyStore=true /p:AndroidSigningKeyAlias="$env:ANDROID_KEY_ALIAS" /p:AndroidSigningKeyPass="$env:ANDROID_KEY_PASS" /p:AndroidSigningKeyStore="$env:WS\android.keystore" /p:AndroidSigningStorePass="$env:ANDROID_KEYSTORE_PASS"
          Remove-Item "$env:WS\android.keystore.encoded"
          Remove-Item "$env:WS\android.keystore"
        env:          
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASS: ${{ secrets.ANDROID_KEY_PASS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
              
      - shell: bash
        name: Remove excess android files
        run: |
          mkdir artifacts/apk/
          find artifacts/android/ -name '*-Signed.apk' -exec cp "{}" artifacts/apk/ \;
          rm -rf artifacts/android/
          mv artifacts/apk/amusoft.pcr.mobile.droid-Signed.apk artifacts/apk/amusoft.pcr.mobile.droid.apk
                    
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: apk
          path: "artifacts/apk/amusoft.pcr.mobile.droid.apk"          
          if-no-files-found: error
          retention-days: 1 
          
                    
  Windows:    
    runs-on: windows-latest
    steps:
            
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: 16.9
          
      - shell: pwsh
        name: Build server
        run: |
          dotnet publish src/Amusoft.PCR.Server/Amusoft.PCR.Server.csproj -c $env:BUILDCONFIGURATION -o artifacts/server/web
          dotnet publish src/Amusoft.PCR.Integration.WindowsDesktop/Amusoft.PCR.Integration.WindowsDesktop.csproj -c $env:BUILDCONFIGURATION -o artifacts/server/win-integration
                    
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: server
          path: "artifacts/server/"          
          if-no-files-found: error
          retention-days: 1    
   

  BuildCompletes:    
    runs-on: windows-latest
    needs: [Windows, Android]
    steps:
      - name: Status message
        shell: bash
        run: echo Builds are successful
    
  InstallerWindows:    
    runs-on: windows-latest
    needs: [BuildCompletes]
    steps:     
    
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: 16.9
          
      - name: Download APK Artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: apk
          #path: artifacts/msi/web/wwwroot/downloads/   
          path: artifacts/apk/
          
      - name: Download APK Artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: server
          #path: artifacts/msi/web/wwwroot/downloads/   
          path: artifacts/web/msi/
                    
     #- name: Display folder structure
     #  shell: bash
     #  run: ls -R artifacts/
          
      - shell: bash
        name: Move APK to Server content directory
        run: |
          mkdir -p artifacts/msi/web/wwwroot/downloads/
          cp artifacts/apk/amusoft.pcr.mobile.droid.apk artifacts/msi/web/wwwroot/downloads/amusoft.pcr.mobile.droid.apk
              
   #  - shell : bash
   #    name: Load MSI signing key
   #    run: |
   #      echo -n "$MSI_SNK_B64" > "$WS\MSI_SNK_B64.encoded"
   #      base64 --decode "$WS\MSI_SNK_B64.encoded" > "$WS\MSI_SNK_B64.snk"  
   #    env:
   #      MSI_SNK_B64: ${{ secrets.MSI_SNK_B64 }}          
          
      - shell: pwsh
        name: Compile MSI using WiX Installer
        run: |
          msbuild /verbosity:normal /t:"Build" /bl /p:Configuration=$env:BUILDCONFIGURATION src/WixBuild.sln
      #/p:OFFICIAL_WIX_BUILD="$env:WS\MSI_SNK_B64.snk"
            
   #  - shell : bash
   #    name: Remove MSI signing keys
   #    run: |
   #      rm $WS\MSI_SNK_B64.encoded
   #      rm $WS\MSI_SNK_B64.snk
   #    env:
   #      MSI_SNK_B64: ${{ secrets.MSI_SNK_B64 }}   
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: server
          path: "artifacts/msi-compiled/${{ github.event.inputs.buildConfiguration }}/*.msi"          
          if-no-files-found: error
          retention-days: 1           
          
  GitHubRelease:    
    runs-on: windows-latest
    if: github.event.inputs.createRelease == '1'
    needs: [InstallerWindows]
    steps:
                                
      - name: Download artifact apk
        uses: actions/download-artifact@v2.0.10
        with:
          name: apk
          #path: artifacts/msi/web/wwwroot/downloads/   
          path: artifacts/apk/
          
      - name: Download artifact server
        uses: actions/download-artifact@v2.0.10
        with:
          name: server
          #path: artifacts/msi/web/wwwroot/downloads/   
          path: artifacts/web/msi/

      - name: Check release asset existance
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "artifacts/apk/amusoft.pcr.mobile.droid.apk, artifacts/msi/Amusoft PC Remote 2.msi"
          
      - name: Create release version
        id: version
        #run: echo "::set-output name=version::$(./bin/azblogfilter --version)"
        #run: echo "::set-output name=version::release-${{ github.sha }}"        
        shell: pwsh
        run: |
          $trimmedSha = $("${{ github.sha }}").Substring(0,27)
          echo "::set-output name=version::ci-release-$trimmedSha"
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ steps.version.outputs.version }}
          #body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      #- name: Display structure of downloaded files
      #  shell: bash
      #  run: ls -R $GITHUB_WORKSPACE/downloads/
          
      - id: upload-release-asset-apk
        name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/apk/amusoft.pcr.mobile.droid.apk
          asset_name: amusoft.pcr.mobile.droid.apk
          asset_content_type: application/vnd.android.package-archive
                    
      - id: upload-release-asset-msi
        name: Upload MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/msi-compiled/Release/Amusoft PC Remote 2.msi
          asset_name: Amusoft PC Remote 2.msi
          asset_content_type: application/octet-stream
