name: CI

on:

  push:
    branches:
      - master 
    paths: 
      - src/*
      
  pull_request:
    types: 
      - opened
      - reopened
      - synchronize
      
  # manual trigger
  workflow_dispatch:
  
env:
  ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
  ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  ANDROID_KEY_PASS: ${{ secrets.ANDROID_KEY_PASS }}
  ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
  WS: ${{ github.workspace }}


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: 16.9
                    
      - shell : bash
        name: Load android keystore
        run: |
          echo -n "$ANDROID_KEYSTORE" > "$WS\android.keystore.encoded"
          base64 --decode "$WS\android.keystore.encoded" > "$WS\android.keystore"  
          
      - shell: pwsh
        name: Build APK
        run: |
          msbuild src/Amusoft.PCR.Mobile.Droid/Amusoft.PCR.Mobile.Droid.csproj /verbosity:minimal /restore /t:"SignAndroidPackage" /bl /p:Configuration=Release /p:OutputPath="$env:WS\artifacts\android" /p:AndroidKeyStore=true /p:AndroidSigningKeyAlias="$env:ANDROID_KEY_ALIAS" /p:AndroidSigningKeyPass="$env:ANDROID_KEY_PASS" /p:AndroidSigningKeyStore="$env:WS\android.keystore" /p:AndroidSigningStorePass="$env:ANDROID_KEYSTORE_PASS"
          Remove-Item "$env:WS\android.keystore.encoded"
          Remove-Item "$env:WS\android.keystore"
              
      - shell: bash
        name: Remove excess android files
        run: |
          mkdir artifacts/apk/
          find artifacts/android/ -name '*-Signed.apk' -exec cp "{}" artifacts/apk/ \;
          rm -rf artifacts/android/
          mv artifacts/apk/amusoft.pcr.mobile.droid-Signed.apk artifacts/apk/amusoft.pcr.mobile.droid.apk
                           
      - shell: pwsh
        name: Build server
        run: |
          dotnet publish src/Amusoft.PCR.Server/Amusoft.PCR.Server.csproj -c Release -o artifacts/msi/web
          dotnet publish src/Amusoft.PCR.Integration.WindowsDesktop/Amusoft.PCR.Integration.WindowsDesktop.csproj -c Release -o artifacts/msi/win-integration
                    
      - shell: bash
        name: Move APK to Server content directory
        run: |
          mkdir -p artifacts/msi/web/wwwroot/downloads/
          cp artifacts/apk/amusoft.pcr.mobile.droid.apk artifacts/msi/web/wwwroot/downloads/amusoft.pcr.mobile.droid.apk
              
      - shell : bash
        name: Load MSI signing key
        run: |
          echo -n "$MSI_SNK_B64" > "$WS\MSI_SNK_B64.encoded"
          base64 --decode "$WS\MSI_SNK_B64.encoded" > "$WS\MSI_SNK_B64.snk"  
        env:
          MSI_SNK_B64: ${{ secrets.MSI_SNK_B64 }}          
          
      - shell: pwsh
        name: Compile MSI using WiX Installer
        run: |
          msbuild /verbosity:normal /t:"Build" /bl /p:Configuration=Release src/WixBuild.sln /p:OFFICIAL_WIX_BUILD="$env:WS\MSI_SNK_B64.snk"
                    
      - shell : bash
        name: Remove MSI signing keys
        run: |
          rm $WS\MSI_SNK_B64.encoded
          rm $WS\MSI_SNK_B64.snk
        env:
          MSI_SNK_B64: ${{ secrets.MSI_SNK_B64 }}   
        
   #  - name: Display structure of msi-compiled
   #    shell: bash
   #    run: ls -R artifacts/msi-compiled/
  
   #  - name: Upload a Build Artifact
   #    uses: actions/upload-artifact@v2.2.4
   #    with:
   #      name: apk
   #      path: "**/*-Signed.apk"          
   #      if-no-files-found: error
   #      retention-days: 14              
          
      - name: Create release version
        #run: echo "::set-output name=version::$(./bin/azblogfilter --version)"
        #run: echo "::set-output name=version::release-${{ github.sha }}"        
        shell: pwsh
        run: |
          $trimmedSha = $("${{ github.sha }}").Substring(0,27)
          echo "::set-output name=version::ci-release-$trimmedSha"  
        id: version
          
  #   - name: Download a Build Artifact
  #     uses: actions/download-artifact@v2.0.10
  #     with:
  #       # Artifact name
  #       name: apk
  #       # Destination path
  #       #path: ${{ github.workspace }}/downloads/
  #       path: artifacts/msi/web/wwwroot/downloads/          
         
  #   - name: Display structure of downloaded files
  #     shell: bash
  #     run: ls -R artifacts/

      - name: Check release asset existance
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "artifacts/apk/amusoft.pcr.mobile.droid.apk, artifacts/msi-compiled/Release/Amusoft PC Remote 2.msi"
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ steps.version.outputs.version }}
          #body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      #- name: Display structure of downloaded files
      #  shell: bash
      #  run: ls -R $GITHUB_WORKSPACE/downloads/
          
      - id: upload-release-asset-apk
        name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          #asset_path: ${{ github.workspace }}/downloads/artifacts/amusoft.pcr.mobile.droid.apk
          asset_path: artifacts/apk/amusoft.pcr.mobile.droid.apk
          asset_name: amusoft.pcr.mobile.droid.apk
          asset_content_type: application/vnd.android.package-archive
                    
      - id: upload-release-asset-msi
        name: Upload MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          #asset_path: ${{ github.workspace }}/downloads/artifacts/amusoft.pcr.mobile.droid.apk
          asset_path: artifacts/msi-compiled/Release/Amusoft PC Remote 2.msi
          asset_name: Amusoft PC Remote 2.msi
          asset_content_type: application/octet-stream

          
